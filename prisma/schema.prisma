generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id
  email     String   @unique @db.VarChar(255)
  password  String?
  googleId  String?  @unique @map("google_id")
  role      Role     @default(COLLABORATOR)
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile                Profile?
  requestedTransferences Transference[] @relation("RequestedBy")
  approvedTransferences  Transference[] @relation("ApprovedBy")
  movements              Movement[]
  refreshTokens          RefreshToken[]

  @@map("accounts")
}

model Profile {
  id        String   @id
  accountId String   @unique @map("account_id")
  name      String   @db.VarChar(100)
  phone     String?  @db.VarChar(15)
  avatar    String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("profiles")
}

model RefreshToken {
  id        String   @id
  accountId String   @map("account_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  account Account @relation(fields: [accountId], references: [id])

  @@map("refresh_tokens")
}

model Company {
  id        String   @id
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(15)
  cnpj      String   @unique @db.VarChar(18)
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products      Product[]
  units         Unit[]
  transferences Transference[]

  @@map("companies")
}

model Product {
  id           String   @id
  companyId    String   @map("company_id")
  name         String   @db.VarChar(100)
  sku          String   @unique @db.VarChar(50)
  description  String?  @db.VarChar(255)
  priceCost    Float    @default(0.0) @map("price_cost")
  priceSale    Float    @default(0.0) @map("price_sale")
  minimumStock Int      @default(0) @map("minimum_stock")
  status       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  company       Company        @relation(fields: [companyId], references: [id], onDelete: Restrict)
  transferences Transference[]
  stocks        Stock[]
  movements     Movement[]

  @@map("products")
}

model Unit {
  id        String   @id
  companyId String   @map("company_id")
  name      String   @db.VarChar(50)
  address   String   @db.VarChar(255)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(2)
  zipCode   String   @map("zip_code") @db.VarChar(10)
  phone     String?  @db.VarChar(15)
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company           Company        @relation(fields: [companyId], references: [id], onDelete: Restrict)
  transferencesFrom Transference[] @relation("UnitFrom")
  transferencesTo   Transference[] @relation("UnitTo")
  stocks            Stock[]
  movements         Movement[]

  @@map("units")
}

model Transference {
  id          String             @id
  companyId   String             @map("company_id")
  productId   String             @map("product_id")
  unitFromId  String             @map("unit_from_id")
  unitToId    String             @map("unit_to_id")
  requestedBy String             @map("requested_by")
  approvedBy  String?            @map("approved_by")
  quantity    Int                @default(0)
  status      TransferenceStatus @default(PENDING)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  product            Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  unitFrom           Unit     @relation("UnitFrom", fields: [unitFromId], references: [id], onDelete: Restrict)
  unitTo             Unit     @relation("UnitTo", fields: [unitToId], references: [id], onDelete: Restrict)
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Restrict)
  requestedByAccount Account  @relation("RequestedBy", fields: [requestedBy], references: [id], onDelete: Restrict)
  approvedByAccount  Account? @relation("ApprovedBy", fields: [approvedBy], references: [id], onDelete: Restrict)

  @@map("transferences")
}

model Stock {
  id              String   @id
  productId       String   @map("product_id")
  unitId          String   @map("unit_id")
  currentQuantity Int      @default(0) @map("current_quantity")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  unit    Unit    @relation(fields: [unitId], references: [id], onDelete: Restrict)

  @@map("stocks")
}

model Movement {
  id          String       @id
  productId   String       @map("product_id")
  unitId      String       @map("unit_id")
  accountId   String       @map("account_id")
  type        MovementType
  quantity    Int          @default(0)
  description String?      @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  unit    Unit    @relation(fields: [unitId], references: [id], onDelete: Restrict)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("movements")
}

enum Role {
  ADMIN
  MANAGER
  COLLABORATOR
}

enum TransferenceStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}
